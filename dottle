#!/bin/sh

# color variables
ESC="\033["
RESET=$ESC"0m"
RED=$ESC"0;31;01m"
GREEN=$ESC"0;32;01m"
YELLOW=$ESC"0;33;01m"
BLUE=$ESC"0;34;01m"
MAGENTA=$ESC"0;35;01m"

# print funcion
output () {
    # load params
    level=${1}
    message=${2}
    case $level in
        ok)
            if [ ! -z "$message" ] ; then
                printf "${GREEN}[ok]${RESET} %b\n" "$message"
            else
                printf "${GREEN}[ok]${RESET}"
            fi
            ;;
        warn)
            printf "${BLUE}[warning]${RESET} %b\n" "$message"
            ;;
        info)
            printf "${BLUE}[info]${RESET} %b\n" "$message"
            ;;
        error)
            if [ ! -z "$message" ] ; then
                printf "${RED}[error]${RESET} %b\n" "$message" 1>&2
            else
                printf "${RED}[error]${RESET}" 1>&2
            fi
            ;;
        debug)
            if [ -n "$DEBUG" ]; then
                printf "${MAGENTA}[debug]${RESET} %b\n" "$message" 1>&2
            fi
            ;;
        running)
            printf "${YELLOW}[running]${RESET} %b" "$message"
            ;;
        internal_error)
            printf "${RED}[internal error]${RESET} %b\n" "$message" 1>&2
            printf "    Please file an issue at https://github.com/ludat/dottle/issues\n" 1>&2
            ;;
        *)
            output internal_error "bad output level ('$level'),\n    original message: $message"
            ;;
    esac
}

show_help () {
    cat << EOF
Usage: ./dottle [OPTIONS] COMMAND [ARGS]

Options:
- None for now

Commands and args:
- None for now
EOF
}

# escape a string mainly for expand_vars
escape () {
    output debug "EXPAND: '$1'"
    printf '%s' "$1" | sed \
                        -e 's:^~/:'$HOME'/:' \
                        -e 's/\\\([^\$]\)/\\\\&/g' \
                        -e 's/"/\\"/g' \
                        -e 's/\\\$/\\\$/g'
}

# expand env vars in a string
expand_vars () {
    eval printf '%s' "\"$(escape "$1")\""
}

# execute the function in a *subshell* to localize variables and the effect of `cd`.
rreadlink() {
    target=$1 fname= targetDir=
    while true; do # Resolve potential symlinks until the ultimate target is found.
        [ -L "$target" ] || [ -e "$target" ] || return 1
        cd "$(dirname -- "$target")" # Change to target dir; necessary for correct resolution of target path.
        fname=$(basename -- "$target") # Extract filename.
        if [ -L "$fname" ]; then
            # Extract [next] target path, which may be defined
            # *relative* to the symlink's own directory.
            # Note: We parse `ls -l` output to find the symlink target
            #       which is the only POSIX-compliant, albeit somewhat fragile, way,
            target=$(ls -l "$fname")
            target=${target#* -> }
            continue # Resolve [next] symlink target.
        fi
        break # Ultimate target reached.
    done
    targetDir=$(pwd -P) # Get canonical dir. path
    # Output the ultimate target's canonical path.
    printf '%s' "${targetDir}/$fname"
}

backup () {
    if [ -e "$1" ] && [ ! -L "$1" ]; then
        while true; do
            new_file="${1}.$(date "+%Y-%m-%d_%H-%M-%S").backup"
            if [ ! -e "${new_file}" ]; then
                if mv "$1" "$new_file"; then
                    output debug "Backed up '$1' to '$new_file'"
                    return 0
                else
                    output error "Failed to back up '${1}' to '${new_file}'"
                    return 1
                fi
            fi
        done
    else
        return 1
    fi
}

get_flag () {
    printf '%s' " ${1} " | grep " ${2} " > /dev/null && printf '%s' "true" && return 0
    printf '%s' " ${1} " | grep " ${2}! " > /dev/null && printf '%s' "false" && return 0
    if printf '%s' " ${1} " | grep " ${2}=" > /dev/null; then
        printf '%s' " ${1} " | sed 's/.* '${2}'=\([^ ]*\) .*/\1/' && return 0
    fi
    return 1
}

default_flag () {
    if ! get_flag "$1" "$2"> /dev/null; then
        printf "${1} ${2}${3}"
    else
        printf "${1}"
    fi
}

get_git () {
    # Get git repo into a directory
    # Possible configuration flags:
    #   branch: branch name of the repo
    #       default: branch=master
    FLAGS=$(default_flag "$FLAGS" "branch" "=master")
    #   remote: branch name of the repo
    #       default: remote=origin
    FLAGS=$(default_flag "$FLAGS" "remote" "=origin")
    #   backup: if the file already exists back it up otherwise just remove it
    #       default: backup!
    FLAGS=$(default_flag "$FLAGS" "backup" "!")
    #   update: if set and path already exists and is a git repo just pull from origin
    #       default: update
    FLAGS=$(default_flag "$FLAGS" "update" "")
    #   verify_ssl: if set check if cret is valid (usefull for self signed certs)
    #       default: verify_ssl
    FLAGS=$(default_flag "$FLAGS" "verify_ssl" "")
    #   recursive: when cloning a repo use flag --recursive
    #       default: recursive
    FLAGS=$(default_flag "$FLAGS" "recursive" "")
    #   tar_magic: if git is not installed use tar and curl to get remote files (hacky as fuck)
    #       default: tar_magic!
    FLAGS=$(default_flag "$FLAGS" "tar_magic" "!")
    #   force: try to get repo no matter what
    #       default: force!
    FLAGS=$(default_flag "$FLAGS" "force" "!")

    output debug "FLAGS: '${FLAGS}'"
    DEST="$(expand_vars "${1}")"
    output debug "DEST: '${DEST}'"
    REPO="$(expand_vars "${2}")"
    output debug "REPO: '${REPO}'"
    BRANCH="$(get_flag "$FLAGS" 'branch')"
    output debug "BRANCH: '${BRANCH}'"
    REMOTE="$(get_flag "$FLAGS" 'remote')"
    output debug "REMOTE: '${REMOTE}'"
    if [ "$(get_flag "$FLAGS" 'recursive')" = 'true' ]; then
        RECURSIVE="--recursive"
    else
        RECURSIVE=""
    fi
    output debug "RECURSIVE: '${RECURSIVE}'"
    if [ "$(get_flag "$FLAGS" 'verify_ssl')" = 'true' ]; then
        VERIFY_SSL="true"
    else
        VERIFY_SSL="false"
    fi
    output debug "VERIFY_SSL: '${VERIFY_SSL}'"

    # if git is not installed fail
    if ! command -v git > /dev/null && [ "$(get_flag "$FLAGS" 'tar_magic')" = 'false' ]; then
        output error "git is not installed and tar_magic flag is not set"
        return 1
    fi

    if [ -d "${DEST}/.git" ] && \
            [ "$(get_flag "$FLAGS" 'update')" = 'true' ] && \
            (cd "$DEST"; [ "$(git config --get "remote.${REMOTE}.url")" = "${REPO}" ]); then
        (
        if ! cd "$DEST"; then
            output error "Couldn't \`cd\` into '$DEST'"
            return 1
        fi

        if ! git config http.sslVerify "$VERIFY_SSL"; then
            output error "Couldn't set config"
            return 1
        fi

        output debug "git 'checkout' '$BRANCH'"
        if ! git checkout "$BRANCH" > /dev/null 2>&1; then
            output error "Couldn't checkout '$BRANCH'"
            return 1
        fi

        output running "pulling '$BRANCH' branch from '$REPO'\n"
        output debug "git 'pull' '$REMOTE' '$BRANCH'"
        if ! git pull "$REMOTE" "$BRANCH"; then
            output error "Couldn't pull '$BRANCH' branch from '$REMOTE'"
            return 1
        fi

        if [ "$(get_flag "$FLAGS" 'recursive')" = 'true' ]; then
            output debug "git submodule update --init --recursive"
            if ! git submodule update --init --recursive; then
                output error "Couldn't update submodules"
                return 1
            fi
        fi
        ) && output ok "Pulled successfully"
    else
        [ "$(get_flag "$FLAGS" 'backup')" = 'true' ] && backup "$DEST"
        rm -rf "$DEST"
        mkdir -p "$DEST"
        if command -v git > /dev/null; then
            output debug "git clone --config 'http.sslVerify=$VERIFY_SSL' '$RECURSIVE' --branch '$BRANCH' '$REPO' '$DEST'"
            if ! git clone --config "http.sslVerify=$VERIFY_SSL" "$RECURSIVE" --branch "$BRANCH" "$REPO" "$DEST"; then
                output error "git clone command failed"
                return 1
            fi
        else
            output error "tar_magic is not implemented yet"
        fi
    fi
}

link () {
    # Creates link from the first arg to second arg
    # Possible configuration flags:
    #   create: if final directory doesn't exist create them recursively
    #       default: create
    FLAGS=$(default_flag "$FLAGS" "create" "")
    #   force: create recursive directories and symlink no matter what
    #       default: force!
    FLAGS=$(default_flag "$FLAGS" "force" "!")
    #   ign_broken: don't care if link will be broke
    #       default: ign_broken
    FLAGS=$(default_flag "$FLAGS" "ign_broken" "!")
    #   backup: if file already exists, back it up
    #       default: backup
    FLAGS=$(default_flag "$FLAGS" "backup" "")
    #   relative: if set target of links will be relative and won't be altered in any way
    #       default: relative!
    FLAGS=$(default_flag "$FLAGS" "relative" "!")

    output debug "Flags for link: '$FLAGS'"

    DEST="$(expand_vars "${1}")"
    output debug "DEST: '$DEST'"
    SOURCE="$(expand_vars "${BASEDIR}/${2}")"
    # if relative flag set to false expand with BASEDIR else let it raw
    if [ "$(get_flag "$FLAGS" 'relative')" = 'true' ]; then
        SOURCE_T="$(printf "$SOURCE" | sed -e 's:^/::')"
        DEST_T="$(printf "$DEST" | sed -e 's:^/::')"

        SOURCE_BASE="$(printf "$SOURCE_T" | grep -o "^[^/]*")"
        DEST_BASE="$(printf "$DEST_T" | grep -o "^[^/]*")"

        while [ "$DEST_BASE" = "$SOURCE_BASE" ]; do
            SOURCE_T="$(printf "$SOURCE_T" | sed -e 's:^[^/]*/::')"
            DEST_T="$(printf "$DEST_T" | sed -e 's:^[^/]*/::')"
            # output info "SOURCE_T = $SOURCE_T"
            # output info "DEST_T = $DEST_T"

            SOURCE_BASE="$(printf "$SOURCE_T" | grep -o "^[^/]*")"
            DEST_BASE="$(printf "$DEST_T" | grep -o "^[^/]*")"
        done
        if [ "$(basename "$DEST_T")" = "." ]; then
            SOURCE="$(dirname "$DEST_T" | sed -e 's:[^/]*:..:g')/$SOURCE_T"
        else
            SOURCE="$SOURCE_T"
        fi
    fi

    output debug "SOURCE: '$SOURCE'"

    # check if force flag is set
    if [ "$(get_flag "$FLAGS" 'force')" = 'true' ]; then
        output debug "force flag is set to true. I will do my best to fulfil your wishes master"
        [ "$(get_flag "$FLAGS" 'backup')" = 'true' ] && backup "$DEST"
        rm -rf "$DEST"
        mkdir -p "$(dirname "$DEST")"
        ln -s "$SOURCE" "$DEST" && output ok "${DEST} -> ${SOURCE}" || output error "${DEST} -> ${SOURCE}"
        return 0
    fi

    # if link will be broken and ign_broken flag is set exit
    if [ "$(get_flag "$FLAGS" 'relative')" = 'false' ]; then
        if [ "$(get_flag "$FLAGS" 'ign_broken')" = 'false' ] && [ ! -e "$SOURCE" ]; then
            output warn "'${SOURCE}' doesn't exists. Quiting because ign_broken flag is not set"
            return 1
        fi
    elif [ "$(get_flag "$FLAGS" 'relative')" = 'true' ]; then
        output warn "If relative flag is set the ign_broken flag is ignored because I can't determinate if the final file exists"
    else
        output internal_error "relative not in '$FLAGS'"
    fi

    # if DEST dir doesn't exists and create flag is set, create it
    if [ ! -d "$(dirname "$DEST")" ]; then
        if [ "$(get_flag "$FLAGS" 'create')" = 'true' ]; then
            mkdir -p "$(dirname "$DEST")"
        elif [ "$(get_flag "$FLAGS" 'create')" = 'false' ]; then
            output warn "'$(dirname "${DEST}")' doesn't exists. Quiting because create flag is not set"
            return 1
        else
            output internal_error "create not in '$FLAGS'"
        fi
    fi

    if [ -L "$DEST" ]; then
        if printf '%s' "$(rreadlink "$DEST")" | grep "^$BASEDIR" > /dev/null; then
            output info "File '${DEST}' exists and it points to my BASEDIR. Replacing it"
            rm "$DEST"
        else
            output error "'${DEST}' is a link but it's not mine. Quiting"
            return 1
        fi
    elif [ -e "$DEST" ]; then
        [ "$(get_flag "$FLAGS" 'backup')" = 'true' ] && backup "$DEST"
        rm -rf "$DEST"
    fi
    # Actually make the link
    if ln -s "$SOURCE" "$DEST"; then
        output ok "${1} -> ${SOURCE}"
    else
        output error "${1} -> ${SOURCE}"
    fi
}

shell () {
    # execute an external command
    # Possible configuration flags:
    #   interactive: if set all stds will be redirected to this shell
    #       default: interactive!
    FLAGS=$(default_flag "$FLAGS" "interactive" "!")
    #   stdin: sets the stdin of cmd
    #       default: stdin=
    FLAGS=$(default_flag "$FLAGS" "stdin" "=")
    #   stdout: sets the stdout of cmd
    #       default: stdout=
    FLAGS=$(default_flag "$FLAGS" "stdout" "=")
    #   stderr: sets the stderr of cmd
    #       default: stderr=
    FLAGS=$(default_flag "$FLAGS" "stderr" "=")

    STDIN="$(get_flag "$FLAGS" 'stdin')"
    output debug "STDIN: $STDIN"
    STDOUT="$(get_flag "$FLAGS" 'stdout')"
    output debug "STDOUT: $STDOUT"
    STDERR="$(get_flag "$FLAGS" 'stderr')"
    output debug "STDERR: $STDERR"
    RUN="$1"
    OK=""
    CMD="${2}"

    # add >/dev/null to cmd if stdout flag is not set
    if [ "$(get_flag "$FLAGS" 'interactive')" = 'true' ]; then
        OK="     ${RUN}"
        RUN="${RUN}\n"
        CMD="$CMD > ${STDOUT:-/dev/stdout}"
        CMD="$CMD < ${STDIN:-/dev/tty}"
        CMD="$CMD 2> ${STDERR:-/dev/stderr}"
    elif [ "$(get_flag "$FLAGS" 'interactive')" = 'false' ]; then
        OK=" "
        RUN="${RUN} "
        CMD="$CMD > ${STDOUT:-/dev/null}"
        CMD="$CMD < ${STDIN:-/dev/null}"
        CMD="$CMD 2> ${STDERR:-/dev/null}"
    else
        output internal_error "interactive not in '$FLAGS'"
        return 1
    fi
    output debug "COMMAND: $CMD"

    output running "$RUN"
    ( eval $CMD ) && output ok "$OK" || output error "$OK"
}

debug_cmd () {
    FLAGS=$(default_flag "$FLAGS" "true" "")
    FLAGS=$(default_flag "$FLAGS" "false" "!")
    FLAGS=$(default_flag "$FLAGS" "first" "=first")
    FLAGS=$(default_flag "$FLAGS" "second" "=second")
    output ok "debug command"
    output ok "Flags: '$FLAGS'"
    ARG1="$(expand_vars ${1})"
    output ok "Arg1:  '$ARG1'"
    ARG2="$(expand_vars ${2})"
    output ok "Arg2:  '$ARG2'"
}

# get config file line indentation level
get_level () {
    printf '%s' "$1" | grep -o '^\s*' | grep -o " \{4\}" | wc -l
}

# parse config file and call proper function to handle a command
install () {
    COMMAND=''
    OPTIONS=''
    while IFS='' read -r line; do
        # Replace tabs with four spaces
        # Remove comments from lines
        line=$(printf '%s' "$line" | sed 's/#.*$//' | sed 's/^ *$//')
        if [ -z "$line" ]; then
            continue
        fi
        if [ "$(get_level "$line")" -eq "0" ]; then
            if [ "${line%%:*}" = 'link' ]; then
                COMMAND='link'
                OPTIONS="${line#*:}"
            elif [ "${line%%:*}" = 'shell' ]; then
                COMMAND='shell'
                OPTIONS=${line#*:}
            elif [ "${line%%:*}" = 'get_git' ]; then
                COMMAND='get_git'
                OPTIONS=${line#*:}
            elif [ "${line%%:*}" = 'debug_cmd' ]; then
                COMMAND='debug_cmd'
                OPTIONS=${line#*:}
            else
                COMMAND=''
                output error "'${line%%:*}' command is not one of valid commands"
            fi
        elif [ "$(get_level "$line")" -gt "0" ] && [ -n "$COMMAND" ]; then
            # Trim whitespaces
            FST_ARG=$( printf '%s' "${line%%:*}" | sed -e 's/^ *//' -e 's/ *$//')
            SND_ARG=$( printf '%s' "${line#*:}"  | sed -e 's/^ *//' -e 's/ *$//')
            output debug "executing FLAGS='${OPTIONS}' '$COMMAND' '$FST_ARG' '$SND_ARG'"
            FLAGS="${OPTIONS}" $COMMAND "$FST_ARG" "$SND_ARG"
        fi
    done < "$CONFIG_FILE"
}

# check if config file contains tabulators
check () {
    if grep $'\t' "$CONFIG_FILE"; then
        output error "The config file ('${CONFIG_FILE}') contains tabs."
        return 1
    fi
}

# main
case "$1" in
    --help)
        show_help
        ;;
    check)
        CONFIG_FILE="${2:-install.conf.yml}"
        if check; then
            output ok "The file doesn't contain any errors"
        else
            output error "The file has some serious errors"
        fi
        ;;
    install)
        CONFIG_FILE_FULL_PATH="${2:-install.conf.yml}"
        BASEDIR="$(cd "$(dirname "$CONFIG_FILE_FULL_PATH")" && pwd)"
        CONFIG_FILE="$(basename "${CONFIG_FILE_FULL_PATH}")"
        cd "$BASEDIR"
        if check; then
            install
        fi
        ;;
    remove)
        output error "not implemented yet"
        ;;
    clean)
        output error "not implemented yet"
        ;;
    *)
        printf "%s\n" "Try 'install' or '--help'"
        ;;
esac
