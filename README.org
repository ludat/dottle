#+TITLE: dottle

* Motivation and Inspiration

Manage your dotfiles anywhere with just a very cross-platform script.

I wanted to be able to install my dotfiles transparently onto (mostly) any
system. My main inspiration is [[https://github.com/anishathalye/dotbot][dotbot]] from which I stole the configuration yaml
file.

If you find a bug or want a new feature just post an issue or make a
pull request.

* Installation

It barely needs an Unix OS but for the sake of lists:

- POSIX compatible shell in /bin/sh
- grep, sed, ln, mv, rm, mkdir, printf, etc. (all POSIX versions)
- git [optional] to get stuff from the internet

If you use ArchLinux, it's in the AUR [[https://aur.archlinux.org/packages/dottle/]]
otherwise you can either download the latest (v0.2.2) release [[https://github.com/ludat/dottle/releases/download/v0.2.2/dottle][here]] which is compiled into one
big script or just clone this repo and execute =dottle= by it's absolute path
* Usage
Example:

[[http://giant.gfycat.com/ScornfulBelovedCrow.gif]]

#+BEGIN_SRC shell
dottle [action] [config file]
#+END_SRC

where action is what you want to do (eg. =install=, =update=, etc.)

The config file a is kind of yaml without the dashes and all commands follow
this structure:

#+BEGIN_SRC shell
COMMAND: [OPT] [OPT] [...]
    ARG1: ARG2
    [ARG1: ARG2]
    [ARG1: ARG2]
    ...
#+END_SRC

for example:

#+BEGIN_SRC shell
link:
    ~/.vimrc: vimrc
#+END_SRC

If the action is install this will create a link in =~/.vimrc= pointing to
=$PWD/vimrc=, but if the action is update this will update an existing link in
=~/.vimrc= to point to =$PWD/vimrc=.
* Commands
** link
Creates a symlink in =ARG1= pointing to =$PWD/ARG2=

- command: link
- =ARG1=: Symlink file path which should be an absolute path (~ get expanded)
- =ARG2=: Path which will be appended by the dotfiles directory, should be
  relative to the directory of dottle.
- =OPTIONS=:
  - =backup=: (default true) if true when dottle finds the file it's trying to
    create it will move it to FILE.DATE.backup
  - =ign_broken=: (default false) if false dottle will refuse to create broken
    symlinks
  - =relative=: (default false) if true don't try to expand =ARG2= to an
    absolute path. =ign_broken= will be ignored
  - =create=: (default true) if true dottle will create recursively the
    directories for =ARG1=
  - =force=: (default false) dottle will do its best to create the symlink
** shell
Executes ARG2

- command: shell
- =ARG1=: Verbose description of command for humans
- =ARG2=: command that will be executed
- =OPTIONS=:
  - =interactive=: (default false) if false all output and input will be
    silenced. If true it should work but eval handles stdin and stdout weirdly
    (not to be trusted)

* Warnings
Since this is implemented in pure POSIX shell script there are a lot of hacks in
the code and some =evals= and I'm still working on this so maybe you shouldn't
trust it to manage your super critical production machine.
